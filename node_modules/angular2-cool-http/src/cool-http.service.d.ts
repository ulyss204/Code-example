import { Http, Response, RequestOptions } from '@angular/http';
import { Observable } from 'rxjs/Rx';
import { HttpHeader } from './http-header.model';
import { IRequestInterceptor } from './request-interceptor.interface';
import { IResponseInterceptor } from './response-interceptor.interface';
export interface Func<T, T1, T2, TResult> {
    (item: T, item1: T1, item2: T2): TResult;
}
export declare class CoolHttp {
    private _http;
    private _cookieStore;
    private _globalHeaders;
    private _requestInterceptors;
    private _responseInterceptors;
    private _customCookieToHeaders;
    private _baseUrl;
    private _withCredentials;
    constructor(http: Http);
    registerBaseUrl(baseUrl: string): void;
    setWithCredentials(status: boolean): void;
    registerGlobalHeader(header: HttpHeader): void;
    registerRequestInterceptor(requestInterceptor: IRequestInterceptor): void;
    deregisterRequestInterceptor(requestInterceptor: IRequestInterceptor): boolean;
    registerResponseInterceptor(responseInterceptor: IResponseInterceptor): void;
    deregisterResponseInterceptor(responseInterceptor: IResponseInterceptor): boolean;
    sendCookieValueInCustomHeader(cookieName: string, customHeaderName: string): void;
    getAsync(url: string, options?: RequestOptions): Promise<any>;
    postAsync(url: string, data?: any, options?: RequestOptions): Promise<any>;
    putAsync(url: string, data?: any, options?: RequestOptions): Promise<any>;
    deleteAsync(url: string, options?: RequestOptions): Promise<any>;
    patchAsync(url: string, data?: any, options?: RequestOptions): Promise<any>;
    headAsync(url: string, options?: RequestOptions): Promise<any>;
    private requestCoreAsync(url, method, data, options, action);
    getObservable(url: string, options?: RequestOptions): Observable<Response>;
    postObservable(url: string, data: any, options?: RequestOptions): Observable<Response>;
    putObservable(url: string, data: any, options?: RequestOptions): Observable<Response>;
    deleteObservable(url: string, options?: RequestOptions): Observable<Response>;
    patchObservable(url: string, data: any, options?: RequestOptions): Observable<Response>;
    headObservable(url: string, options?: RequestOptions): Observable<Response>;
    private requestCoreObservable(url, method, data, options, action);
    private convertUrl(url);
    private modifyOptions(options);
    private appendGlobalHeaders(headers);
    private tryAppendRegisteredCookiestoCustomHeaders(headers);
    private invokeRequestInterceptorsAsync(url, method, data, headers);
    private invokeResponseInterceptorsAsync(response, url, method, data, headers);
    private convertAngularHeadersToHttpClientHeaders(headers);
}
