{"version":3,"file":"cool-http.service.js","sourceRoot":"","sources":["../Users/Hacklone/Projects/Public/angular2-cool-http/src/cool-http.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Http, Headers, Response, RequestOptions } from '@angular/http';\nimport { Observable } from 'rxjs/Rx';\n\nimport { HttpHeader } from './http-header.model';\nimport { CookieStore } from './cookie-store.service';\nimport { IRequestInterceptor } from './request-interceptor.interface';\nimport { IResponseInterceptor } from './response-interceptor.interface';\n\nexport interface Func<T, T1, T2, TResult> {\n  (item: T, item1: T1, item2: T2): TResult;\n}\n\n@Injectable()\nexport class CoolHttp {\n  private _http: Http;\n\n  private _cookieStore: CookieStore = new CookieStore();\n\n  private _globalHeaders: HttpHeader[] = [];\n  private _requestInterceptors: IRequestInterceptor[] = [];\n  private _responseInterceptors: IResponseInterceptor[] = [];\n  private _customCookieToHeaders = [];\n  private _baseUrl;\n  private _withCredentials;\n\n  constructor(http: Http) {\n    this._http = http;\n  }\n\n  public registerBaseUrl(baseUrl: string): void {\n    this._baseUrl = baseUrl;\n\n    if (this._baseUrl[this._baseUrl.length - 1] !== '/') {\n      this._baseUrl += '/';\n    }\n  }\n\n  public setWithCredentials(status: boolean): void {\n    this._withCredentials = status;\n  }\n\n  public registerGlobalHeader(header: HttpHeader): void {\n    this._globalHeaders.push(header);\n  }\n\n  public registerRequestInterceptor(requestInterceptor: IRequestInterceptor): void {\n    this._requestInterceptors.push(requestInterceptor);\n  }\n\n  public deregisterRequestInterceptor(requestInterceptor: IRequestInterceptor): boolean {\n    let indexOfItem = this._requestInterceptors.indexOf(requestInterceptor);\n\n    if (indexOfItem === -1) {\n      return false;\n    }\n\n    this._requestInterceptors.splice(indexOfItem, 1);\n\n    return true;\n  }\n\n  public registerResponseInterceptor(responseInterceptor: IResponseInterceptor): void {\n    this._responseInterceptors.push(responseInterceptor);\n  }\n\n  public deregisterResponseInterceptor(responseInterceptor: IResponseInterceptor): boolean {\n    let indexOfItem = this._responseInterceptors.indexOf(responseInterceptor);\n\n    if (indexOfItem === -1) {\n      return false;\n    }\n\n    this._responseInterceptors.splice(indexOfItem, 1);\n\n    return true;\n  }\n\n  public sendCookieValueInCustomHeader(cookieName: string, customHeaderName: string): void {\n    this._customCookieToHeaders.push({\n      cookieName: cookieName,\n      customHeaderName: customHeaderName\n    });\n  }\n\n  public async getAsync(url: string, options: RequestOptions = new RequestOptions()): Promise<any> {\n    let that = this;\n\n    return await that.requestCoreAsync(url, 'GET', null, options, (url, data, modOptions) => {\n      return that._http.get(url, modOptions);\n    });\n  }\n\n  public async postAsync(url: string, data?: any, options: RequestOptions = new RequestOptions()): Promise<any> {\n    let that = this;\n\n    return await that.requestCoreAsync(url, 'POST', data, options, (url, data, modOptions) => {\n      return that._http.post(url, data, modOptions);\n    });\n  }\n\n  public async putAsync(url: string, data?: any, options: RequestOptions = new RequestOptions()): Promise<any> {\n    let that = this;\n\n    return await that.requestCoreAsync(url, 'PUT', data, options, (url, data, modOptions) => {\n      return that._http.put(url, data, modOptions);\n    });\n  }\n\n  public async deleteAsync(url: string, options: RequestOptions = new RequestOptions()): Promise<any> {\n    let that = this;\n\n    return await that.requestCoreAsync(url, 'DELETE', null, options, (url, data, modOptions) => {\n      return that._http['delete'](url, modOptions);\n    });\n  }\n\n  public async patchAsync(url: string, data?: any, options: RequestOptions = new RequestOptions()): Promise<any> {\n    let that = this;\n\n    return await that.requestCoreAsync(url, 'PATCH', data, options, (url, data, modOptions) => {\n      return that._http.patch(url, data, modOptions);\n    });\n  }\n\n  public async headAsync(url: string, options: RequestOptions = new RequestOptions()): Promise<any> {\n    let that = this;\n\n    return await that.requestCoreAsync(url, 'HEAD', null, options, (url, data, modOptions) => {\n      return that._http.head(url, modOptions);\n    });\n  }\n\n  private async requestCoreAsync(url: string, method: string, data: any, options: RequestOptions, action: Func<string, any, RequestOptions, Observable<Response>>): Promise<any> {\n    options.headers = options.headers || new Headers();\n\n    url = this.convertUrl(url);\n\n    this.appendGlobalHeaders(options.headers);\n\n    this.tryAppendRegisteredCookiestoCustomHeaders(options.headers);\n\n    this.modifyOptions(options);\n\n    let clientHeaders = this.convertAngularHeadersToHttpClientHeaders(options.headers);\n\n    let shouldIntercept = await this.invokeRequestInterceptorsAsync(url, method, data, clientHeaders);\n\n    if (shouldIntercept) {\n      return;\n    }\n\n    let response;\n\n    try {\n      response = await action(url, data, options).toPromise();\n    }\n    catch (errorResponse) {\n      response = errorResponse;\n    }\n\n    shouldIntercept = await this.invokeResponseInterceptorsAsync(response, url, method, data, clientHeaders);\n\n    if (shouldIntercept) {\n      return;\n    }\n\n    if (!response.ok) {\n      throw new Error(`Failed to call api ${method} ${url}`);\n    }\n\n    let returnValue;\n\n    try {\n      returnValue = response.json();\n    }\n    catch (e) {\n      returnValue = response.text();\n    }\n\n    return returnValue;\n  }\n\n  public getObservable(url: string, options: RequestOptions = new RequestOptions()): Observable<Response> {\n    let that = this;\n\n    return that.requestCoreObservable(url, 'GET', null, options, (url, data, modOptions) => {\n      return that._http.get(url, modOptions);\n    });\n  }\n\n  public postObservable(url: string, data: any, options: RequestOptions = new RequestOptions()): Observable<Response> {\n    let that = this;\n\n    return that.requestCoreObservable(url, 'POST', data, options, (url, data, modOptions) => {\n      return that._http.post(url, data, modOptions);\n    });\n  }\n\n  public putObservable(url: string, data: any, options: RequestOptions = new RequestOptions()): Observable<Response> {\n    let that = this;\n\n    return that.requestCoreObservable(url, 'PUT', data, options, (url, data, modOptions) => {\n      return that._http.put(url, data, modOptions);\n    });\n  }\n\n  public deleteObservable(url: string, options: RequestOptions = new RequestOptions()): Observable<Response> {\n    let that = this;\n\n    return that.requestCoreObservable(url, 'DELETE', null, options, (url, data, modOptions) => {\n      return that._http['delete'](url, modOptions);\n    });\n  }\n\n  public patchObservable(url: string, data: any, options: RequestOptions = new RequestOptions()): Observable<Response> {\n    let that = this;\n\n    return that.requestCoreObservable(url, 'PATCH', data, options, (url, data, modOptions) => {\n      return that._http.patch(url, data, modOptions);\n    });\n  }\n\n  public headObservable(url: string, options: RequestOptions = new RequestOptions()): Observable<Response> {\n    let that = this;\n\n    return that.requestCoreObservable(url, 'HEAD', null, options, (url, data, modOptions) => {\n      return that._http.head(url, modOptions);\n    });\n  }\n\n  private requestCoreObservable(url: string, method: string, data: any, options: RequestOptions, action: Func<string, any, RequestOptions, Observable<Response>>): Observable<Response> {\n    return Observable.fromPromise(this.requestCoreAsync(url, method, data, options, action));\n  }\n\n  private convertUrl(url: string) {\n    let returnUrl = url;\n\n    if (this._baseUrl) {\n      returnUrl = this._baseUrl + returnUrl;\n    }\n\n    return returnUrl;\n  }\n\n  private modifyOptions(options: RequestOptions) {\n    if (this._withCredentials) {\n      options.withCredentials = true;\n    }\n  }\n\n  private appendGlobalHeaders(headers: Headers): void {\n    for (const registeredHeader of this._globalHeaders) {\n      headers.append(registeredHeader.key, registeredHeader.value);\n    }\n  }\n\n  private tryAppendRegisteredCookiestoCustomHeaders(headers: Headers): void {\n    for (const cookieToHeader of this._customCookieToHeaders) {\n      const cookieValue = this._cookieStore.getCookie(cookieToHeader.cookieName);\n\n      if (cookieValue) {\n        headers.append(cookieToHeader.customHeaderName, cookieValue);\n      }\n    }\n  }\n\n  private async invokeRequestInterceptorsAsync(url: string, method: string, data: any, headers: HttpHeader[]): Promise<boolean> {\n    for (const requestInterceptor of this._requestInterceptors) {\n      const shouldIntercept = await requestInterceptor.beforeRequestAsync(url, method, data, headers);\n\n      if (shouldIntercept) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private async invokeResponseInterceptorsAsync(response: Response, url: string, method: string, data: any, headers: HttpHeader[]): Promise<boolean> {\n    for (const responseInterceptor of this._responseInterceptors) {\n      const shouldIntercept = await responseInterceptor.afterResponseAsync(response, url, method, data, headers);\n\n      if (shouldIntercept) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private convertAngularHeadersToHttpClientHeaders(headers: Headers): HttpHeader[] {\n    return headers.keys().map(headerKey => {\n      const httpClientHeader = new HttpHeader();\n\n      httpClientHeader.key = headerKey;\n      httpClientHeader.value = headers.get(headerKey);\n\n      return httpClientHeader;\n    });\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}