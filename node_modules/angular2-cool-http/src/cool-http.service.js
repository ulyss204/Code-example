"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t;
    return { next: verb(0), "throw": verb(1), "return": verb(2) };
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
var Rx_1 = require("rxjs/Rx");
var http_header_model_1 = require("./http-header.model");
var cookie_store_service_1 = require("./cookie-store.service");
var CoolHttp = (function () {
    function CoolHttp(http) {
        this._cookieStore = new cookie_store_service_1.CookieStore();
        this._globalHeaders = [];
        this._requestInterceptors = [];
        this._responseInterceptors = [];
        this._customCookieToHeaders = [];
        this._http = http;
    }
    CoolHttp.prototype.registerBaseUrl = function (baseUrl) {
        this._baseUrl = baseUrl;
        if (this._baseUrl[this._baseUrl.length - 1] !== '/') {
            this._baseUrl += '/';
        }
    };
    CoolHttp.prototype.setWithCredentials = function (status) {
        this._withCredentials = status;
    };
    CoolHttp.prototype.registerGlobalHeader = function (header) {
        this._globalHeaders.push(header);
    };
    CoolHttp.prototype.registerRequestInterceptor = function (requestInterceptor) {
        this._requestInterceptors.push(requestInterceptor);
    };
    CoolHttp.prototype.deregisterRequestInterceptor = function (requestInterceptor) {
        var indexOfItem = this._requestInterceptors.indexOf(requestInterceptor);
        if (indexOfItem === -1) {
            return false;
        }
        this._requestInterceptors.splice(indexOfItem, 1);
        return true;
    };
    CoolHttp.prototype.registerResponseInterceptor = function (responseInterceptor) {
        this._responseInterceptors.push(responseInterceptor);
    };
    CoolHttp.prototype.deregisterResponseInterceptor = function (responseInterceptor) {
        var indexOfItem = this._responseInterceptors.indexOf(responseInterceptor);
        if (indexOfItem === -1) {
            return false;
        }
        this._responseInterceptors.splice(indexOfItem, 1);
        return true;
    };
    CoolHttp.prototype.sendCookieValueInCustomHeader = function (cookieName, customHeaderName) {
        this._customCookieToHeaders.push({
            cookieName: cookieName,
            customHeaderName: customHeaderName
        });
    };
    CoolHttp.prototype.getAsync = function (url, options) {
        if (options === void 0) { options = new http_1.RequestOptions(); }
        return __awaiter(this, void 0, void 0, function () {
            var that;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        that = this;
                        return [4 /*yield*/, that.requestCoreAsync(url, 'GET', null, options, function (url, data, modOptions) {
                                return that._http.get(url, modOptions);
                            })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    CoolHttp.prototype.postAsync = function (url, data, options) {
        if (options === void 0) { options = new http_1.RequestOptions(); }
        return __awaiter(this, void 0, void 0, function () {
            var that;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        that = this;
                        return [4 /*yield*/, that.requestCoreAsync(url, 'POST', data, options, function (url, data, modOptions) {
                                return that._http.post(url, data, modOptions);
                            })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    CoolHttp.prototype.putAsync = function (url, data, options) {
        if (options === void 0) { options = new http_1.RequestOptions(); }
        return __awaiter(this, void 0, void 0, function () {
            var that;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        that = this;
                        return [4 /*yield*/, that.requestCoreAsync(url, 'PUT', data, options, function (url, data, modOptions) {
                                return that._http.put(url, data, modOptions);
                            })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    CoolHttp.prototype.deleteAsync = function (url, options) {
        if (options === void 0) { options = new http_1.RequestOptions(); }
        return __awaiter(this, void 0, void 0, function () {
            var that;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        that = this;
                        return [4 /*yield*/, that.requestCoreAsync(url, 'DELETE', null, options, function (url, data, modOptions) {
                                return that._http['delete'](url, modOptions);
                            })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    CoolHttp.prototype.patchAsync = function (url, data, options) {
        if (options === void 0) { options = new http_1.RequestOptions(); }
        return __awaiter(this, void 0, void 0, function () {
            var that;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        that = this;
                        return [4 /*yield*/, that.requestCoreAsync(url, 'PATCH', data, options, function (url, data, modOptions) {
                                return that._http.patch(url, data, modOptions);
                            })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    CoolHttp.prototype.headAsync = function (url, options) {
        if (options === void 0) { options = new http_1.RequestOptions(); }
        return __awaiter(this, void 0, void 0, function () {
            var that;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        that = this;
                        return [4 /*yield*/, that.requestCoreAsync(url, 'HEAD', null, options, function (url, data, modOptions) {
                                return that._http.head(url, modOptions);
                            })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    CoolHttp.prototype.requestCoreAsync = function (url, method, data, options, action) {
        return __awaiter(this, void 0, void 0, function () {
            var clientHeaders, shouldIntercept, response, errorResponse_1, returnValue;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        options.headers = options.headers || new http_1.Headers();
                        url = this.convertUrl(url);
                        this.appendGlobalHeaders(options.headers);
                        this.tryAppendRegisteredCookiestoCustomHeaders(options.headers);
                        this.modifyOptions(options);
                        clientHeaders = this.convertAngularHeadersToHttpClientHeaders(options.headers);
                        return [4 /*yield*/, this.invokeRequestInterceptorsAsync(url, method, data, clientHeaders)];
                    case 1:
                        shouldIntercept = _a.sent();
                        if (shouldIntercept) {
                            return [2 /*return*/];
                        }
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, action(url, data, options).toPromise()];
                    case 3:
                        response = _a.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        errorResponse_1 = _a.sent();
                        response = errorResponse_1;
                        return [3 /*break*/, 5];
                    case 5: return [4 /*yield*/, this.invokeResponseInterceptorsAsync(response, url, method, data, clientHeaders)];
                    case 6:
                        shouldIntercept = _a.sent();
                        if (shouldIntercept) {
                            return [2 /*return*/];
                        }
                        if (!response.ok) {
                            throw new Error("Failed to call api " + method + " " + url);
                        }
                        try {
                            returnValue = response.json();
                        }
                        catch (e) {
                            returnValue = response.text();
                        }
                        return [2 /*return*/, returnValue];
                }
            });
        });
    };
    CoolHttp.prototype.getObservable = function (url, options) {
        if (options === void 0) { options = new http_1.RequestOptions(); }
        var that = this;
        return that.requestCoreObservable(url, 'GET', null, options, function (url, data, modOptions) {
            return that._http.get(url, modOptions);
        });
    };
    CoolHttp.prototype.postObservable = function (url, data, options) {
        if (options === void 0) { options = new http_1.RequestOptions(); }
        var that = this;
        return that.requestCoreObservable(url, 'POST', data, options, function (url, data, modOptions) {
            return that._http.post(url, data, modOptions);
        });
    };
    CoolHttp.prototype.putObservable = function (url, data, options) {
        if (options === void 0) { options = new http_1.RequestOptions(); }
        var that = this;
        return that.requestCoreObservable(url, 'PUT', data, options, function (url, data, modOptions) {
            return that._http.put(url, data, modOptions);
        });
    };
    CoolHttp.prototype.deleteObservable = function (url, options) {
        if (options === void 0) { options = new http_1.RequestOptions(); }
        var that = this;
        return that.requestCoreObservable(url, 'DELETE', null, options, function (url, data, modOptions) {
            return that._http['delete'](url, modOptions);
        });
    };
    CoolHttp.prototype.patchObservable = function (url, data, options) {
        if (options === void 0) { options = new http_1.RequestOptions(); }
        var that = this;
        return that.requestCoreObservable(url, 'PATCH', data, options, function (url, data, modOptions) {
            return that._http.patch(url, data, modOptions);
        });
    };
    CoolHttp.prototype.headObservable = function (url, options) {
        if (options === void 0) { options = new http_1.RequestOptions(); }
        var that = this;
        return that.requestCoreObservable(url, 'HEAD', null, options, function (url, data, modOptions) {
            return that._http.head(url, modOptions);
        });
    };
    CoolHttp.prototype.requestCoreObservable = function (url, method, data, options, action) {
        return Rx_1.Observable.fromPromise(this.requestCoreAsync(url, method, data, options, action));
    };
    CoolHttp.prototype.convertUrl = function (url) {
        var returnUrl = url;
        if (this._baseUrl) {
            returnUrl = this._baseUrl + returnUrl;
        }
        return returnUrl;
    };
    CoolHttp.prototype.modifyOptions = function (options) {
        if (this._withCredentials) {
            options.withCredentials = true;
        }
    };
    CoolHttp.prototype.appendGlobalHeaders = function (headers) {
        for (var _i = 0, _a = this._globalHeaders; _i < _a.length; _i++) {
            var registeredHeader = _a[_i];
            headers.append(registeredHeader.key, registeredHeader.value);
        }
    };
    CoolHttp.prototype.tryAppendRegisteredCookiestoCustomHeaders = function (headers) {
        for (var _i = 0, _a = this._customCookieToHeaders; _i < _a.length; _i++) {
            var cookieToHeader = _a[_i];
            var cookieValue = this._cookieStore.getCookie(cookieToHeader.cookieName);
            if (cookieValue) {
                headers.append(cookieToHeader.customHeaderName, cookieValue);
            }
        }
    };
    CoolHttp.prototype.invokeRequestInterceptorsAsync = function (url, method, data, headers) {
        return __awaiter(this, void 0, void 0, function () {
            var _i, _a, requestInterceptor, shouldIntercept;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _i = 0, _a = this._requestInterceptors;
                        _b.label = 1;
                    case 1:
                        if (!(_i < _a.length)) return [3 /*break*/, 4];
                        requestInterceptor = _a[_i];
                        return [4 /*yield*/, requestInterceptor.beforeRequestAsync(url, method, data, headers)];
                    case 2:
                        shouldIntercept = _b.sent();
                        if (shouldIntercept) {
                            return [2 /*return*/, true];
                        }
                        _b.label = 3;
                    case 3:
                        _i++;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/, false];
                }
            });
        });
    };
    CoolHttp.prototype.invokeResponseInterceptorsAsync = function (response, url, method, data, headers) {
        return __awaiter(this, void 0, void 0, function () {
            var _i, _a, responseInterceptor, shouldIntercept;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _i = 0, _a = this._responseInterceptors;
                        _b.label = 1;
                    case 1:
                        if (!(_i < _a.length)) return [3 /*break*/, 4];
                        responseInterceptor = _a[_i];
                        return [4 /*yield*/, responseInterceptor.afterResponseAsync(response, url, method, data, headers)];
                    case 2:
                        shouldIntercept = _b.sent();
                        if (shouldIntercept) {
                            return [2 /*return*/, true];
                        }
                        _b.label = 3;
                    case 3:
                        _i++;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/, false];
                }
            });
        });
    };
    CoolHttp.prototype.convertAngularHeadersToHttpClientHeaders = function (headers) {
        return headers.keys().map(function (headerKey) {
            var httpClientHeader = new http_header_model_1.HttpHeader();
            httpClientHeader.key = headerKey;
            httpClientHeader.value = headers.get(headerKey);
            return httpClientHeader;
        });
    };
    return CoolHttp;
}());
CoolHttp = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [http_1.Http])
], CoolHttp);
exports.CoolHttp = CoolHttp;
//# sourceMappingURL=src/cool-http.service.js.map