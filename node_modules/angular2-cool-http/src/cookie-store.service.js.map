{"version":3,"file":"cookie-store.service.js","sourceRoot":"","sources":["../Users/Hacklone/Projects/Public/angular2-cool-http/src/cookie-store.service.ts"],"names":[],"mappings":";AAAA;IAAA;IA8CA,CAAC;IAzCQ,+BAAS,GAAhB,UAAiB,GAAW;QAC1B,IAAI,gBAAgB,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAElD,MAAM,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;IAC/B,CAAC;IAEM,yCAAmB,GAA1B;QACE,IAAI,gBAAgB,GAAG,QAAQ,CAAC,MAAM,CAAC;QAEvC,EAAE,CAAC,CAAC,gBAAgB,KAAK,IAAI,CAAC,2BAA2B,CAAC,CAAC,CAAC;YAC1D,MAAM,CAAC,IAAI,CAAC,wBAAwB,CAAC;QACvC,CAAC;QAED,IAAI,CAAC,2BAA2B,GAAG,gBAAgB,CAAC;QACpD,IAAI,CAAC,wBAAwB,GAAG,EAAE,CAAC;QAEnC,EAAE,CAAC,CAAC,IAAI,CAAC,2BAA2B,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YAC1D,IAAI,OAAO,GAAG,IAAI,CAAC,2BAA2B,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAE3D,GAAG,CAAC,CAAe,UAAO,EAAP,mBAAO,EAAP,qBAAO,EAAP,IAAO;gBAArB,IAAI,MAAM,gBAAA;gBACb,IAAI,gBAAgB,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;gBAE3C,EAAE,CAAC,CAAC,gBAAgB,GAAG,CAAC,CAAC,CAAC,CAAC;oBACzB,IAAI,UAAU,GAAG,WAAW,CAAC,qBAAqB,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,gBAAgB,CAAC,CAAC,CAAC;oBAE1F,IAAI,CAAC,wBAAwB,CAAC,UAAU,CAAC,GAAG,WAAW,CAAC,qBAAqB,CAAC,MAAM,CAAC,SAAS,CAAC,gBAAgB,GAAG,CAAC,CAAC,CAAC,CAAC;gBACxH,CAAC;aACF;QACH,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,wBAAwB,CAAC;IACvC,CAAC;IAEc,iCAAqB,GAApC,UAAqC,YAAoB;QACvD,IAAI,CAAC;YACH,MAAM,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC;QAC1C,CAAC;QACD,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACT,MAAM,CAAC,YAAY,CAAC;QACtB,CAAC;IACH,CAAC;IACH,kBAAC;AAAD,CAAC,AA9CD,IA8CC;AA9CY,kCAAW","sourcesContent":["export class CookieStore {\n  lastReadRawCookieCollection: string;\n\n  lastReadCookieCollection: any;\n\n  public getCookie(key: string): string {\n    let cookieCollection = this.getCookieCollection();\n\n    return cookieCollection[key];\n  }\n\n  public getCookieCollection(): any {\n    let currentRawCookie = document.cookie;\n\n    if (currentRawCookie === this.lastReadRawCookieCollection) {\n      return this.lastReadCookieCollection;\n    }\n\n    this.lastReadRawCookieCollection = currentRawCookie;\n    this.lastReadCookieCollection = {};\n\n    if (this.lastReadRawCookieCollection.indexOf('; ') !== -1) {\n      let cookies = this.lastReadRawCookieCollection.split('; ');\n\n      for (let cookie of cookies) {\n        let indexOfEqualSign = cookie.indexOf('=');\n\n        if (indexOfEqualSign > 0) {\n          let cookieName = CookieStore.tryDecodeUriComponent(cookie.substring(0, indexOfEqualSign));\n\n          this.lastReadCookieCollection[cookieName] = CookieStore.tryDecodeUriComponent(cookie.substring(indexOfEqualSign + 1));\n        }\n      }\n    }\n\n    return this.lastReadCookieCollection;\n  }\n\n  private static tryDecodeUriComponent(uriComponent: string): string {\n    try {\n      return decodeURIComponent(uriComponent);\n    }\n    catch (e) {\n      return uriComponent;\n    }\n  }\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}